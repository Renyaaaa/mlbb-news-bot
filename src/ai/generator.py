import os
import requests
import random
from config import OPENROUTER_API_KEY, OPENROUTER_MODEL, client, LANGUAGE

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY", "")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")

OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"
ANTHROPIC_URL = "https://api.anthropic.com/v1/messages"
GEMINI_URL = "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent"

SYSTEM_PROMPT = (
    "You are a Mobile Legends: Bang Bang content creator for a Telegram channel. "
    "Your task is to write short, hype, and engaging posts in English about tricks or tips or tutorial with specific heroes. "
    "Keep it fun, natural, and like social media captions. Avoid long explanations."
)

USER_TEMPLATE = (
    "Create a completely unique and specific post about the hero {hero} from Mobile Legends: Bang Bang. "
    "Focus on their unique abilities, playstyle, or specific mechanics that make them special. "
    "Mention a specific trick, combo, or strategy that is unique to this hero. "
    "Make it sound exciting and different from any other hero post. "
    "Constraints: 1-2 sentences, max 60 words. "
    "Style: unique, hype, and specific to this hero. "
    "End with 'Check the video üëá'. "
    "Do not use generic phrases like 'unleash power' or 'master the art'. "
    "Be specific about what makes {hero} unique."
)

# Fallback —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
FALLBACK_TEMPLATES = [
    "üî• {hero} is waiting to dominate the battlefield! Master their ultimate combo and become unstoppable! Check the video üëá",
    "‚ö° Want to carry your team with {hero}? This tutorial reveals the secret strategies that pros use! Check the video üëá",
    "üéØ {hero} can be your ticket to Mythic rank! Learn the positioning and timing that makes all the difference! Check the video üëá",
    "üíé Discover why {hero} is secretly OP! This guide shows you the build and playstyle that wins games! Check the video üëá",
    "üöÄ Ready to unlock {hero}'s true potential? This tutorial teaches you the advanced mechanics that separate good from great! Check the video üëá",
    "‚öîÔ∏è {hero} dominates the front line! Master the balance of damage and survivability to carry your team! Check the video üëá",
    "üéÆ {hero} is the hero you've been waiting for! Learn their unique playstyle and dominate every match! Check the video üëá",
    "üåü {hero} can turn any game around! Master their skills and become the MVP your team needs! Check the video üëá",
    "üí™ {hero} is your path to victory! This tutorial reveals the strategies that make them unstoppable! Check the video üëá",
    "üé≤ {hero} is the wildcard that wins games! Learn their unpredictable playstyle and surprise your enemies! Check the video üëá",
    "üî• Master {hero}'s signature combo and watch enemies fall! This guide reveals the timing that makes all the difference! Check the video üëá",
    "‚ö° {hero} isn't just strong - they're strategically brilliant! Learn the positioning that makes them unstoppable! Check the video üëá",
    "üéØ Every {hero} player needs to know this! Master their unique mechanics and dominate the battlefield! Check the video üëá",
    "üíé {hero} has a secret that most players miss! Discover the build and strategy that wins games! Check the video üëá",
    "üöÄ Ready to master {hero}? This tutorial shows you the advanced techniques that separate pros from amateurs! Check the video üëá"
]

# –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤
HERO_SPECIFIC_POSTS = {
    "Layla": [
        "üéØ {hero} is the ultimate late-game carry! Master farming and positioning to become unstoppable! Check the video üëá",
        "üí• {hero} can 1v5 the entire enemy team! Learn the positioning that makes her a nightmare! Check the video üëá",
        "üéØ {hero}'s range is her weapon! Master the distance and watch enemies fall before they can reach you! Check the video üëá"
    ],
    "Claude": [
        "‚ö° {hero} is the fastest marksman alive! Master his mobility and kite enemies to death! Check the video üëá",
        "üé≠ {hero} is the trickster of the battlefield! Learn his unique mechanics and outplay everyone! Check the video üëá",
        "‚ö° {hero}'s dash is everything! Master the timing and positioning to become untouchable! Check the video üëá"
    ],
    "Hanabi": [
        "üå∏ {hero} blooms in team fights! Master her ultimate timing and watch enemies fall like petals! Check the video üëá",
        "üí´ {hero} is the queen of positioning! Learn how to stay safe while dealing massive damage! Check the video üëá",
        "üå∏ {hero}'s ultimate can change the entire game! Master the timing and watch your team dominate! Check the video üëá"
    ],
    "Balmond": [
        "ü™ì {hero} is the executioner! Master his ultimate timing and secure every kill! Check the video üëá",
        "üíÄ {hero} brings death to the battlefield! Learn his aggressive playstyle and dominate! Check the video üëá",
        "ü™ì {hero}'s spin is his signature move! Master the timing and watch enemies fall! Check the video üëá"
    ],
    "Uranus": [
        "üõ°Ô∏è {hero} is the unbreakable shield! Master his defensive mechanics and protect your team! Check the video üëá",
        "üåå {hero} controls the battlefield! Learn his zoning abilities and control every fight! Check the video üëá",
        "üõ°Ô∏è {hero} is the ultimate protector! Master his taunt timing and save your carries! Check the video üëá"
    ],
    "Minsitthar": [
        "‚öîÔ∏è {hero} is the battlefield commander! Master his ultimate timing and control every team fight! Check the video üëá",
        "üõ°Ô∏è {hero} leads from the front! Learn his initiation and watch your team dominate! Check the video üëá",
        "‚öîÔ∏è {hero}'s ultimate is game-changing! Master the positioning and secure every objective! Check the video üëá"
    ],
    "Akai": [
        "üêº {hero} is the ultimate disruptor! Master his ultimate timing and scatter enemy formations! Check the video üëá",
        "üõ°Ô∏è {hero} controls the battlefield! Learn his positioning and protect your carries! Check the video üëá",
        "üêº {hero}'s ultimate can win team fights! Master the timing and watch enemies panic! Check the video üëá"
    ],
    "Dyrroth": [
        "üî• {hero} is the beast of the battlefield! Master his ultimate timing and dominate every fight! Check the video üëá",
        "‚öîÔ∏è {hero} brings raw power! Learn his combo timing and watch enemies fall! Check the video üëá",
        "üî• {hero}'s ultimate is devastating! Master the positioning and secure every kill! Check the video üëá"
    ]
}


def generate_with_anthropic(hero: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Anthropic Claude"""
    if not ANTHROPIC_API_KEY:
        return None

    try:
        headers = {
            "x-api-key": ANTHROPIC_API_KEY,
            "anthropic-version": "2023-06-01",
            "content-type": "application/json"
        }

        data = {
            "model": "claude-3-sonnet-20240229",
            "max_tokens": 150,
            "messages": [
                {"role": "user", "content": USER_TEMPLATE.format(hero=hero)}
            ]
        }

        response = requests.post(
            ANTHROPIC_URL, headers=headers, json=data, timeout=30)
        response.raise_for_status()

        result = response.json()
        content = result["content"][0]["text"].strip()
        print(f"‚úÖ Anthropic Claude —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: {content}")
        return content

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Anthropic: {e}")
        return None


def generate_with_gemini(hero: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google Gemini"""
    if not GEMINI_API_KEY:
        return None

    try:
        url = f"{GEMINI_URL}?key={GEMINI_API_KEY}"

        data = {
            "contents": [{
                "parts": [{
                    "text": USER_TEMPLATE.format(hero=hero)
                }]
            }],
            "generationConfig": {
                "maxOutputTokens": 150,
                "temperature": 0.8
            }
        }

        response = requests.post(url, json=data, timeout=30)
        response.raise_for_status()

        result = response.json()
        content = result["candidates"][0]["content"]["parts"][0]["text"].strip()
        print(f"‚úÖ Google Gemini —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: {content}")
        return content

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini: {e}")
        return None


def generate_with_openrouter(hero: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenRouter"""
    try:
        response = client.chat.completions.create(
            model=OPENROUTER_MODEL,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": USER_TEMPLATE.format(hero=hero)}
            ],
            max_tokens=150,
            temperature=0.8
        )

        content = response.choices[0].message.content.strip()
        print(f"‚úÖ OpenRouter —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: {content}")
        return content

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenRouter: {e}")
        return None


def clean_text_for_telegram(text: str, max_length: int = 1000) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    """
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    cleaned = " ".join(text.split())

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(cleaned) > max_length:
        cleaned = cleaned[:max_length-3] + "..."

    return cleaned


def generate_hero_post(hero: str, video_url: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –¥–ª—è –≥–µ—Ä–æ—è —Å YouTube —Å—Å—ã–ª–∫–æ–π.
    –ü—Ä–æ–±—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
    """
    print(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç –¥–ª—è –≥–µ—Ä–æ—è {hero}...")

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    ai_providers = [
        ("OpenRouter", lambda: generate_with_openrouter(hero)),
        ("Anthropic Claude", lambda: generate_with_anthropic(hero)),
        ("Google Gemini", lambda: generate_with_gemini(hero))
    ]

    for provider_name, provider_func in ai_providers:
        print(f"  üîÑ –ü—Ä–æ–±—É–µ–º {provider_name}...")
        try:
            content = provider_func()
            if content:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                if video_url not in content:
                    content += f"\n\n{video_url}"

                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
                content = clean_text_for_telegram(content)
                return content
        except Exception as e:
            print(f"    ‚ö†Ô∏è {provider_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            continue

    # –ï—Å–ª–∏ –≤—Å–µ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π fallback
    print("  üîÑ –í—Å–µ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é fallback...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –≥–µ—Ä–æ—è
    if hero in HERO_SPECIFIC_POSTS:
        fallback_template = random.choice(HERO_SPECIFIC_POSTS[hero])
        print(f"  üéØ –ò—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è {hero}")
    else:
        fallback_template = random.choice(FALLBACK_TEMPLATES)
        print(f"  üé≤ –ò—Å–ø–æ–ª—å–∑—É—é –æ–±—â–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è {hero}")

    fallback_text = fallback_template.format(hero=hero)
    fallback_text += f"\n\n{video_url}"

    # –û—á–∏—â–∞–µ–º fallback —Ç–µ–∫—Å—Ç —Ç–æ–∂–µ
    fallback_text = clean_text_for_telegram(fallback_text)

    print(f"‚úÖ Fallback –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª: {fallback_text}")
    return fallback_text


def generate_hero_post_alternative(hero: str, video_url: str) -> str:
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—Å—Ç–æ–≤ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
    """
    print(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è –≥–µ—Ä–æ—è {hero}...")

    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –≥–µ—Ä–æ—è
    hero_traits = {
        "Layla": "marksman", "Claude": "marksman", "Hanabi": "marksman",
        "Tank": "tank", "Support": "support", "Mage": "mage",
        "Fighter": "fighter", "Assassin": "assassin"
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –≥–µ—Ä–æ—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    role = "hero"
    for trait, hero_role in hero_traits.items():
        if trait.lower() in hero.lower():
            role = hero_role
            break

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
    role_posts = {
        "marksman": f"üéØ {hero} is the ultimate carry! Master positioning and farming to dominate late game! Check the video üëá",
        "tank": f"üõ°Ô∏è {hero} leads the charge! Learn proper initiation and team fight positioning! Check the video üëá",
        "support": f"üíô {hero} keeps the team alive! Master timing and positioning for maximum impact! Check the video üëá",
        "mage": f"‚ú® {hero} controls the battlefield! Learn combo timing and skill rotations! Check the video üëá",
        "fighter": f"‚öîÔ∏è {hero} dominates the front line! Master the balance of damage and survivability! Check the video üëá",
        "assassin": f"üó°Ô∏è {hero} strikes from the shadows! Learn proper timing and target selection! Check the video üëá",
        "hero": f"üî• {hero} is ready to carry your team! Master their unique mechanics and become unstoppable! Check the video üëá"
    }

    post = role_posts.get(role, role_posts["hero"])
    post += f"\n\n{video_url}"

    print(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª: {post}")
    return post
